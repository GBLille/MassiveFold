params {
    help = false
    h = false
    config_tool = "/home/ubuntu/MassiveFold/massivefold/parallelization/ColabFold_params.json"
}
//recuperer directement les params depuis le fichier ColabFold_params.json
// a voir avec nessim pour une install plus clean 


profiles {
    local {
        process.executor  = 'local'
        docker.enabled    = false
        singularity.enabled = false
        apptainer.enabled = false
    }

    docker_nogpu {
        docker.enabled    = true
        docker.autoMounts = true
        singularity.enabled = false
        apptainer.enabled = false
        
        process {
            withLabel: colabfold {
                container         = 'jysgro/colabfold:latest'
                docker.runOptions = "-v ${params.database_dir}:${params.database_dir}:rw"
            }
            withLabel: python_treatment {
                container = 'romudock/python_basic_packages:latest'
            }
        }
    }

    docker {
        docker.enabled    = true
        docker.autoMounts = true
        singularity.enabled = false
        apptainer.enabled = false
        
        process {
            withLabel: colabfold {
                container         = 'jysgro/colabfold:latest'
                docker.runOptions = "-v ${params.database_dir}:${params.database_dir}:rw --gpus all"

            }
            withLabel: python_treatment {
                container = 'romudock/python_basic_packages:latest'
            }
        }

    }

    apptainer {
        docker.enabled    = false
        singularity.enabled = false
        apptainer.enabled = true
        apptainer.autoMounts = true

        process {
            withLabel: colabfold {
                container = 'jysgro/colabfold:latest'
                apptainer.runOptions = "--bind ${params.database_dir}:${params.database_dir}:rw --nv"
            }
            withLabel: python_treatment {
                container = 'romudock/python_basic_packages:latest'
            }
        }
    }

    conda {
    docker.enabled    = false
    singularity.enabled = false
    apptainer.enabled = false
    conda.enabled = true
    process.conda = 'mf_colabfold.yml'
    }

    distant {
        workDir = 's3://test-nf/work'
        
        docker.enabled = true
        wave.enabled = true
        fusion.enabled = true
        fusion.exportStorageCredentials = true
        
        aws {
        
            client {
                endpoint = 'https://biosphere-s3.france-bioinformatique.fr'
                s3PathStyleAccess = true
                signerOverride = 'S3SignerType' 
                protocol = 'https'
            }
        
        }

        k8s {
            namespace = 'default'
            serviceAccount = 'default' 
            computeResourceType = 'Job'
           
        }

        process {
            withLabel: colabfold {
                container         = 'romudock/colabfold-fuse:latest'
                executor = 'k8s'
                scratch = false 
                
            }
            withLabel: python_treatment {
                container = 'romudock/python_basic_packages:latest'
                executor = 'k8s'
                scratch = false 
            }
        }
    }
}


// Possible d'utiliser s3 pour d'autre condition que profile=distant mais 
// Staging foreign file: s3://colabfold-db/colabfold 
// Qui peut etre long et impossible voir la qté de données 1,6To 

aws {
        
            client {
                endpoint = 'https://biosphere-s3.france-bioinformatique.fr'
                s3PathStyleAccess = true
                signerOverride = 'S3SignerType' 
                protocol = 'https'
            }
        
        }